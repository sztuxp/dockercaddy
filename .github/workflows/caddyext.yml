name: Build and Publish Caddy Docker Images

on:
  workflow_dispatch:


env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_REPO || 'sztuxp/caddy' }}
  REGISTRY: docker.io

jobs:
  build-binaries:
    name: Build Caddy Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - os: linux
            arch: amd64
            docker_arch: amd64
          - os: linux
            arch: arm64
            docker_arch: arm64
          - os: linux
            arch: arm
            arm: 7
            docker_arch: arm
          - os: linux
            arch: 386
            docker_arch: 386

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf gcc-aarch64-linux-gnu

      - name: Build Caddy for ${{ matrix.platform.arch }}
        run: |
          export GOOS=${{ matrix.platform.os }}
          export GOARCH=${{ matrix.platform.arch }}
          if [ "${{ matrix.platform.arm }}" != "" ]; then
            export GOARM=${{ matrix.platform.arm }}
            BINARY_NAME="caddy-linux-${{ matrix.platform.arch }}v${{ matrix.platform.arm }}"
          else
            BINARY_NAME="caddy-linux-${{ matrix.platform.arch }}"
          fi
          
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
          
          go mod tidy
          CGO_ENABLED=0 go build -a -ldflags '-extldflags "-static"' -o $BINARY_NAME .
          ls -la $BINARY_NAME

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: caddy-${{ matrix.platform.arch }}${{ matrix.platform.arm != '' && format('v{0}', matrix.platform.arm) || '' }}
          path: ${{ env.BINARY_NAME }}
          if-no-files-found: error

  build-docker-images:
    name: Build Docker Images
    needs: build-binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - os: linux
            arch: amd64
            docker_arch: amd64
            artifact_name: amd64
          - os: linux
            arch: arm64
            docker_arch: arm64
            artifact_name: arm64
          - os: linux
            arch: arm
            arm: 7
            docker_arch: arm
            artifact_name: armv7
          - os: linux
            arch: 386
            docker_arch: 386
            artifact_name: 386

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download binary artifact
        uses: actions/download-artifact@v3
        with:
          name: caddy-${{ matrix.platform.artifact_name }}

      - name: Rename and prepare binary
        run: |
          # 根据架构重命名二进制文件
          if [ "${{ matrix.platform.artifact_name }}" = "armv7" ]; then
            BINARY_FILE="caddy-linux-armv7"
          else
            BINARY_FILE="caddy-linux-${{ matrix.platform.artifact_name }}"
          fi
          
          # 如果文件不存在，尝试其他可能的名称
          if [ ! -f "$BINARY_FILE" ]; then
            BINARY_FILE=$(ls caddy-linux-* 2>/dev/null | head -1)
          fi
          
          if [ -f "$BINARY_FILE" ]; then
            mv "$BINARY_FILE" caddy
            chmod +x caddy
            ls -la caddy
          else
            echo "Error: Could not find binary file"
            ls -la
            exit 1
          fi

      - name: Login to DockerHub
        if: env.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM alpine:latest
          RUN apk --no-cache add ca-certificates tzdata
          COPY caddy /usr/bin/caddy
          RUN chmod +x /usr/bin/caddy
          RUN adduser -D -H -u 1001 caddy
          USER caddy
          EXPOSE 80 443 2019
          ENTRYPOINT ["/usr/bin/caddy"]
          CMD ["run", "--config", "/etc/caddy/Caddyfile"]
          EOF

      - name: Get version tag
        run: |
          if [ "${{ github.event.inputs.version }}" != "latest" ] && [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "VERSION_TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION_TAG=latest" >> $GITHUB_ENV
          fi

      - name: Build and push Docker image for ${{ matrix.platform.docker_arch }}
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/${{ matrix.platform.docker_arch }}
          push: ${{ env.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:${{ matrix.platform.docker_arch }}
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:${{ matrix.platform.docker_arch }}-${{ env.VERSION_TAG }}

  create-manifest:
    name: Create Multi-arch Manifest
    needs: build-docker-images
    runs-on: ubuntu-latest
    if: env.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != ''

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get version tag
        run: |
          if [ "${{ github.event.inputs.version }}" != "latest" ] && [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "VERSION_TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION_TAG=latest" >> $GITHUB_ENV
          fi

      - name: Create and push manifest
        run: |
          # Create manifest for specified version
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:${{ env.VERSION_TAG }} \
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:amd64 \
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:arm64 \
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:arm \
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:386

          # If version is not latest, also tag as latest
          if [ "${{ env.VERSION_TAG }}" != "latest" ]; then
            docker buildx imagetools create \
              --tag ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:latest \
              ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:amd64 \
              ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:arm64 \
              ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:arm \
              ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:386
          fi
