name: Build and Publish Caddy Docker Images

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_REPO || 'sztuxp/caddy' }}
  REGISTRY: docker.io

jobs:
  build-binaries:
    name: Build Caddy Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: linux
            arch: arm
            arm: 7
          - os: linux
            arch: 386
          - os: linux
            arch: s390x
          - os: linux
            arch: ppc64le
          - os: linux
            arch: riscv64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf gcc-aarch64-linux-gnu \
            gcc-s390x-linux-gnu gcc-powerpc64le-linux-gnu

      - name: Set environment variables
        run: |
          echo "GOOS=${{ matrix.platform.os }}" >> $GITHUB_ENV
          echo "GOARCH=${{ matrix.platform.arch }}" >> $GITHUB_ENV
          if [ "${{ matrix.platform.arm }}" != "" ]; then
            echo "GOARM=${{ matrix.platform.arm }}" >> $GITHUB_ENV
          fi
          echo "BINARY_NAME=caddy-${{ matrix.platform.os }}-${{ matrix.platform.arch }}" >> $GITHUB_ENV
          if [ "${{ matrix.platform.arm }}" != "" ]; then
            echo "BINARY_NAME=caddy-${{ matrix.platform.os }}-${{ matrix.platform.arch }}v${{ matrix.platform.arm }}" >> $GITHUB_ENV
          fi

      - name: Build Caddy
        run: |
          go mod tidy
          CGO_ENABLED=0 go build -a -ldflags '-extldflags "-static"' -o $BINARY_NAME .
          ls -la $BINARY_NAME

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: caddy-${{ matrix.platform.os }}-${{ matrix.platform.arch }}${{ matrix.platform.arm != '' && format('-v{0}', matrix.platform.arm) || '' }}
          path: caddy-${{ matrix.platform.os }}-${{ matrix.platform.arch }}${{ matrix.platform.arm != '' && format('v{0}', matrix.platform.arm) || '' }}
          if-no-files-found: error

  build-docker-images:
    name: Build Docker Images
    needs: build-binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - os: linux
            arch: amd64
            docker_arch: amd64
          - os: linux
            arch: arm64
            docker_arch: arm64
          - os: linux
            arch: arm
            arm: 7
            docker_arch: armv7
          - os: linux
            arch: 386
            docker_arch: 386
          - os: linux
            arch: s390x
            docker_arch: s390x
          - os: linux
            arch: ppc64le
            docker_arch: ppc64le

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download binary artifact
        uses: actions/download-artifact@v3
        with:
          name: caddy-${{ matrix.platform.os }}-${{ matrix.platform.arch }}${{ matrix.platform.arm != '' && format('-v{0}', matrix.platform.arm) || '' }}

      - name: Prepare binary
        run: |
          chmod +x caddy-${{ matrix.platform.os }}-${{ matrix.platform.arch }}${{ matrix.platform.arm != '' && format('v{0}', matrix.platform.arm) || '' }}
          mv caddy-${{ matrix.platform.os }}-${{ matrix.platform.arch }}${{ matrix.platform.arm != '' && format('v{0}', matrix.platform.arm) || '' }} caddy

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM alpine:latest
          RUN apk --no-cache add ca-certificates tzdata
          COPY caddy /usr/bin/caddy
          RUN chmod +x /usr/bin/caddy
          RUN adduser -D -H -u 1001 caddy
          USER caddy
          EXPOSE 80 443 2019
          ENTRYPOINT ["/usr/bin/caddy"]
          CMD ["run", "--config", "/etc/caddy/Caddyfile"]
          EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/${{ matrix.platform.docker_arch }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:${{ matrix.platform.docker_arch }}
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:${{ matrix.platform.docker_arch }}-${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

  create-manifest:
    name: Create Multi-arch Manifest
    needs: build-docker-images
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}

      - name: Create and push manifest
        run: |
          # Create manifest for latest tag
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:latest \
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:amd64 \
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:arm64 \
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:armv7 \
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:386 \
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:s390x \
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:ppc64le

          # Create manifest for version tag
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION=${GITHUB_REF#refs/tags/}
            docker buildx imagetools create \
              --tag ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:${VERSION} \
              ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:amd64 \
              ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:arm64 \
              ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:armv7 \
              ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:386 \
              ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:s390x \
              ${{ env.REGISTRY }}/${{ env.DOCKERHUB_REPO }}:ppc64le
          fi

  release:
    name: Create Release
    needs: [build-binaries, build-docker-images]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            **/caddy-*
          generate_release_notes: true
